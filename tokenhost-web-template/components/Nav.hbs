import React, { Component } from 'react'
import Link from 'next/link'
import Router from 'next/router'


import { generateKeys } from '../helpers/Web3Helper'




export default class TheNav extends Component {
  _isMounted = false

  constructor(props) {
    super(props)
    this.state = {
      signedIn: false,
      token: null
    }
  }

  signOut = async () => {
    this.handleSignOut()
  }

  handleSignOut = () => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/logout`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        this.setState({ signedIn: false });
        Router.push('/');
      });
  }


  createKey = (eth_account) => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/fetch-user-key`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
      body: JSON.stringify(eth_account),
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        const result = JSON.parse(data);

        if (result.status) {
          this.addAddressToUser(result.keyData);
        }
        this.setState({ loading: false });
        if (result.status) return true;
        return false;
      });
  }
  addAddressToUser = (eth_account) => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/add-user-address`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
      body: JSON.stringify(eth_account),
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        const result = JSON.parse(data);
        this.setState({ loading: false });
        if (result.status) return true;
        return false;
      });
  }

  handleRouteChange = () => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/check-auth`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        const { auth, message } = JSON.parse(data);
        this.setState({ signedIn: auth });
        console.log(message);
      });
  }

  componentDidMount() {
    this._isMounted = true
    
    Router.events.on('routeChangeStart', this.handleRouteChange)

    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/check-auth`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
    })
      .then(response => {
        return response.text();
      })
      .then(async data => {
        const { auth, message } = JSON.parse(data);
        if (auth) {
          const eth_account = await generateKeys()
          this.createKey(eth_account);
        }
        this.setState({ signedIn: auth });
        console.log(message);
      });
  }

  componentWillUnmount() {
    this._isMounted = false
  }

  render() {
    return (
      <nav className="navbar" role="navigation" aria-label="main navigation">
        <div className="container navbar-brand">
          <div className="navbar-item is-pulled-left">
            <Link href="/">
              <a className="button is-white">
                <img src="/TokenHost.png" />
              </a>
            </Link>
          </div>

          {{#each contracts}}
            <div className="navbar-item ">
              <Link href="/{{@key}}">
                <a className="button is-primary">
                  <span>{{@key}}</span>
                </a>
              </Link>
            </div>
          {{/each}}

          <div className="navbar-item ">
            {this.state.signedIn ? (
              <a className="button is-danger" onClick={this.signOut}>
                <span>Sign out</span>
              </a>
            ) : (
              <Link href="/signin">
                <a className="button is-primary">
                  <span>Sign in</span>
                </a>
              </Link>
            )}
          </div>
        </div>
      </nav>
    )
  }
}
