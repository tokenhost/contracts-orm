import React, { Component } from 'react'
import Link from 'next/link'
import Router from 'next/router'

import { generateKeys } from '../helpers/Web3Helper'

export default class TheNav extends Component {
  _isMounted = false

  constructor(props) {
    super(props)
    this.state = {
      signedIn: false,
      user: null,
      token: null
    }
  }

  signOut = async () => {
    this.handleSignOut()
  }

  handleSignOut = () => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/logout`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        this.setState({ signedIn: false });
        Router.push('/');
      });
  }


  createKey = (eth_account) => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/fetch-user-key`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
      body: JSON.stringify(eth_account),
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        const result = JSON.parse(data);

        if (result.status) {
          this.addAddressToUser(result.keyData);
        }
        this.setState({ loading: false });
        if (result.status) return true;
        return false;
      });
  }
  addAddressToUser = (eth_account) => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/add-user-address`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
      body: JSON.stringify(eth_account),
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        const result = JSON.parse(data);
        this.setState({ loading: false });
        if (result.status) return true;
        return false;
      });
  }

  handleRouteChange = () => {
    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/check-auth`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        const { auth, message, user } = JSON.parse(data);
        this.setState({ signedIn: auth });
        this.setState({ user: user });
        console.log(message);
      });
  }

  componentDidMount() {
    this._isMounted = true
    
    Router.events.on('routeChangeStart', this.handleRouteChange)

    fetch(`${process.env.REACT_APP_GOOGLE_AUTH_DOMAIN}/check-auth`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      withCredentials: true,
    })
      .then(response => {
        return response.text();
      })
      .then(async data => {
        const { auth, message, user } = JSON.parse(data);
        if (auth) {
          const eth_account = await generateKeys()
          this.createKey(eth_account);
        }
        this.setState({ signedIn: auth });
        this.setState({ user: user });
        console.log(message);
      });
  }

  componentWillUnmount() {
    this._isMounted = false
  }

  render() {
    return (
      <nav className="navbar" role="navigation" aria-label="main navigation">
        <div className="container">
          <div className="navbar-brand">
            <div className="navbar-item">
              <Link href="/">
                <a className="button is-white">
                  <img src="/TokenHost.png" />
                </a>
              </Link>
            </div>
          </div>
          <div className="navbar-menu">            
            {{#each contracts}}
              <div className="navbar-item ">
                <Link href="/{{@key}}">
                  <a className="button is-primary">
                    <span>{{@key}}</span>
                  </a>
                </Link>
              </div>
            {{/each}}
          </div>
          <div className="navbar-end">
            {
              this.state.signedIn ?
                <div className="navbar-item has-dropdown is-hoverable">
                  <a className="navbar-link">
                    <figure className="image is-32x32 mr-2">
                      <img className="is-rounded" src={(this.state.user && this.state.user.photo) ? this.state.user.photo : "https://bulma.io/images/placeholders/128x128.png"} />
                    </figure>
                    {this.state.user && this.state.user.username}
                  </a>

                  <div className="navbar-dropdown">
                    <Link href="/profile">
                      <a className="navbar-item">
                        Profile
                      </a>
                    </Link>
                    <hr className="navbar-divider" />
                    <div className="navbar-item">
                      <a className="is-danger" onClick={this.signOut}>
                        <span>Sign out</span>
                      </a>
                    </div>
                  </div>
                </div>
                :
                <div className="navbar-item">
                  <Link href="/signin">
                    <a className="button is-primary">
                      <span>Sign in</span>
                    </a>
                  </Link>
                </div>
            }
          </div>
        </div>
      </nav>
    )
  }
}
